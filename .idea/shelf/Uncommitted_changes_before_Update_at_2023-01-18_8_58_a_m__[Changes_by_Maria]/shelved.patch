Index: Lab1part2/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># group number: G16\r\n# student names: Navraj Bains, Amraj Aujla, Greg Berezhnov\r\n\r\nimport random, sys\r\n\r\n\r\nclass TwentyFortyEight:\r\n    def __init__(self) -> None:  # Use as is\r\n        \"\"\"\r\n            initializes the board data field\r\n            and displays the initial board\r\n            and prints a welcome message\r\n        \"\"\"\r\n\r\n        self.board: list = []  # a 2-D list to keep current status of the game board\r\n        for _ in range(4):  # initialize the board cells/tiles with ''\r\n            rowList = []\r\n            for i in range(4):\r\n                rowList.append('')\r\n            self.board.append(rowList)\r\n\r\n        # add two starting 2's at random cells; using a trivial search\r\n        countOfTwosPlacedAtTheBeginning = 0\r\n        while countOfTwosPlacedAtTheBeginning < 2:\r\n            row = random.randint(0, 3)\r\n            column = random.randint(0, 3)\r\n            if self.board[row][column] == '':  # if not already taken\r\n                self.board[row][column] = 2\r\n                countOfTwosPlacedAtTheBeginning += 1\r\n\r\n        print();\r\n        print(\"Welcome! Let's play the 2048 game.\");\r\n        print()\r\n\r\n    def displayGame(self) -> None:  # Use as is\r\n        \"\"\" displays the current board on the console \"\"\"\r\n\r\n        print(\"+-----+-----+-----+-----+\")\r\n        for row in range(4):\r\n            for column in range(4):\r\n                cell = self.board[row][column]\r\n                print(f\"|{str(cell).center(5)}\", end=\"\")\r\n            print(\"|\")\r\n            print(\"+-----+-----+-----+-----+\")\r\n\r\n    def addANewTwoToBoard(self) -> None:\r\n        \"\"\"\r\n            adds a new 2 at a random available cell\r\n        \"\"\"\r\n        randrow = random.randint(0,3)\r\n        randcolumn = random.randint(0,3)\r\n\r\n        #generate random cells until one is empty, place two there\r\n        while self.board[randrow][randcolumn] != \"\":\r\n            randrow = random.randint(0, 3)\r\n            randcolumn = random.randint(0, 3)\r\n\r\n        self.board[randrow][randcolumn] = '2'\r\n\r\n    def isFull(self) -> bool:\r\n        \"\"\" returns True if no empty cell is left, False otherwise \"\"\"\r\n        for i in range(4): #Checks all the rows if\r\n            for j in range(4): #Checks all the coloumns\r\n                if self.board[i][j] == \"\": #checks the location at the specfic column and row to see if it is occupied\r\n                    return False #if any spot is not occupied it returns false\r\n\r\n        return True #returns true if every spot is full\r\n\r\n    def getCurrentScore(self) -> int:\r\n        \"\"\"\r\n            calculates and returns the score\r\n            the score is the sum of all the numbers currently on the board\r\n        \"\"\"\r\n\r\n        score = 0 #Always initiliaze the score as 0\r\n        for row in range(len(self.board)): #Checks rows\r\n            for column in range(len(self.board)): #checks column\r\n                if self.board[row][column] != '': #checks if the specific row and column in empty\r\n                    score += int(self.board[row][column]) # adds the number at the specific location to the score\r\n        return score  # To Implement\r\n\r\n    def updateTheBoardBasedOnTheUserMove(self, move: str) -> None:\r\n        \"\"\"\r\n            updates the board field based on the move argument\r\n            the move argument is either 'W', 'A', 'S', or 'D'\r\n            directions: W for up; A for left; S for down, and D for right\r\n        \"\"\"\r\n\r\n        if move == 'W':\r\n            move_order = [0, 1, 2, 3]\r\n            for column in move_order:\r\n                moved = [True, True, True, True]\r\n                for row in move_order:\r\n                    if self.board[row][column] != '':\r\n                        for i in range(0, row, +1):\r\n                            if self.board[i][column] == '':\r\n                                self.board[i][column] = self.board[row][column]\r\n                                self.board[row][column] = ''\r\n                                break\r\n\r\n                            if int(self.board[i][column]) == int(self.board[row][column]) and moved[i]:\r\n                                j = i + 1\r\n                                open = True\r\n                                # checks to see if there are no numbers present between the two we want to combine\r\n                                while j < row:\r\n                                    if self.board[j][column] != '':\r\n                                        open = False\r\n                                    j += 1\r\n\r\n                                if open:\r\n                                    self.board[i][column] = int(self.board[i][column]) * 2\r\n                                    moved[i] = False\r\n                                    self.board[row][column] = ''\r\n                                    break\r\n        elif move == 'A':\r\n            a = [3, 2, 1, 0]\r\n            b = [0, 1, 2, 3]\r\n            for row in a:\r\n                moved = [True, True, True, True]\r\n                for column in b:\r\n                    if self.board[row][column] != '':\r\n                        for i in range(0, column, +1):\r\n                            if self.board[row][i] == '':\r\n                                self.board[row][i] = self.board[row][column]\r\n                                self.board[row][column] = ''\r\n                                break\r\n                            if int(self.board[row][i]) == int(self.board[row][column]) and moved[i]:\r\n                                j = i+1\r\n                                open = True\r\n                                # checks to see if there are no numbers present between the two we want to combine\r\n                                while j < column:\r\n                                    if self.board[row][j] != '':\r\n                                        open = False\r\n                                    j+=1\r\n\r\n                                if open:\r\n                                    self.board[row][i] = int(self.board[row][i]) * 2\r\n                                    moved[i] = False\r\n                                    self.board[row][column] = ''\r\n                                    break\r\n        elif move == 'D':\r\n            move_order = [3, 2, 1, 0]\r\n            for row in move_order:\r\n                moved = [True, True, True, True]\r\n                for column in move_order:\r\n                    if self.board[row][column] != '':\r\n                        for i in range(3, column, -1):\r\n                            if self.board[row][i] == '':\r\n                                self.board[row][i] = self.board[row][column]\r\n                                self.board[row][column] = ''\r\n                                break\r\n\r\n                            if int(self.board[row][i]) == int(self.board[row][column]) and moved[i]:\r\n                                j = column+1\r\n                                open = True\r\n\r\n                                # checks to see if there are no numbers present between the two we want to combine\r\n                                while j < i:\r\n                                    if self.board[row][j] != '':\r\n                                        open = False\r\n                                    j+=1\r\n\r\n                                if open:\r\n                                    self.board[row][i] = int(self.board[row][i]) * 2\r\n                                    moved[i] = False\r\n                                    self.board[row][column] = ''\r\n                                    break\r\n\r\n        elif move == 'S':\r\n            for column in range(len(self.board)):\r\n                for row in range(len(self.board)):\r\n                    if self.board[row][column] != '':\r\n                        if self.board[row][column] == self.board[row + 1][column]:\r\n                            self.board[row + 1][column] = int(self.board[row+1][column]) * 2\r\n                            self.board[row][column] = ''\r\n                            break\r\n                        for i in range(row + 1, len(self.board)):\r\n                            if self.board[i][column] == '':\r\n                                number = self.board[row][column]\r\n                                self.board[row][column] = ''\r\n                                self.board[i][column] = number\r\n                                break\r\n\r\n\r\n\r\nif __name__ == \"__main__\":  # Use as is\r\n    def promptGamerForTheNextMove() -> str:  # A function used in super-loop\r\n        \"\"\"\r\n            prompts the gamer to select the next move or Q (to quit)\r\n            valid move direction: one of 'W', 'A', 'S' or 'D'.\r\n            either returns a valid move direction or terminates the game\r\n        \"\"\"\r\n        print(\"Enter one of WASD (move direction) or Q (to quit)\")\r\n        while True:  # prompt until a valid input is entered\r\n            move = input('> ').upper()\r\n            if move in ('W', 'A', 'S', 'D'):  # a valid move direction\r\n                return move\r\n            if move == 'Q':  # for quit\r\n                print(\"Exiting the game. Thanks for playing!\")\r\n                sys.exit()\r\n            print('Enter one of \"W\", \"A\", \"S\", \"D\", or \"Q\"')  # otherwise inform the user about valid input\r\n\r\n\r\n    game = TwentyFortyEight()\r\n\r\n    while True:  # Super-loop for the game\r\n        game.displayGame()\r\n        print(f\"Score: {game.getCurrentScore()}\")\r\n        game.updateTheBoardBasedOnTheUserMove(promptGamerForTheNextMove())\r\n        game.addANewTwoToBoard()\r\n\r\n        if game.isFull():\r\n            game.displayGame()\r\n            print(\"Game is over. Check out your score.\")\r\n            print(\"Thanks for playing!\")\r\n            break
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Lab1part2/main.py b/Lab1part2/main.py
--- a/Lab1part2/main.py	
+++ b/Lab1part2/main.py	
@@ -1,5 +1,5 @@
 # group number: G16
-# student names: Navraj Bains, Amraj Aujla, Greg Berezhnov
+# student names: Navraj Bains, Amraj Aujla, Greg Berezhnov, Amin Fahiminia
 
 import random, sys
 
@@ -167,19 +167,32 @@
                                     break
 
         elif move == 'S':
-            for column in range(len(self.board)):
-                for row in range(len(self.board)):
+            move_order = [3, 2, 1, 0]
+            for column in move_order:
+                moved = [True, True, True, True]
+                for row in move_order:
                     if self.board[row][column] != '':
-                        if self.board[row][column] == self.board[row + 1][column]:
-                            self.board[row + 1][column] = int(self.board[row+1][column]) * 2
-                            self.board[row][column] = ''
-                            break
-                        for i in range(row + 1, len(self.board)):
-                            if self.board[i][column] == '':
-                                number = self.board[row][column]
-                                self.board[row][column] = ''
-                                self.board[i][column] = number
-                                break
+                        for i in range(3, row, -1):
+                            if self.board[i][column] == '':
+                                self.board[i][column] = self.board[row][column]
+                                self.board[row][column] = ''
+                                break
+
+                            if int(self.board[i][column]) == int(self.board[row][column]) and moved[i]:
+                                j = row + 1
+                                open = True
+
+                                # checks to see if there are no numbers present between the two we want to combine
+                                while j < i:
+                                    if self.board[j][column] != '':
+                                        open = False
+                                    j += 1
+
+                                if open:
+                                    self.board[i][column] = int(self.board[i][column]) * 2
+                                    moved[i] = False
+                                    self.board[row][column] = ''
+                                    break
 
 
 
Index: Lab1_part1_improved/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># group number: G16\r\n# student names: Greg Berezhnov, Amraj Aujla, Amin Fahiminia, Navraj Bains\r\n\r\nimport random\r\nfrom math import floor\r\n\r\n\r\nclass TicTacToe:\r\n    def __init__(self):  # Use as is\r\n        \"\"\" initializes data fields (board and played)\r\n            and prints the banner messages\r\n            and prints the initial board on the screen\r\n        \"\"\"\r\n        self.board = [' '] * 9  # A list of 9 strings, one for each cell,\r\n        # will contain ' ' or 'X' or 'O'\r\n        self.played = set()  # Set (of cell num) already played: to keep track of the played cells\r\n        print(\"Welcome to Tic-Tac-Toe!\")\r\n        print(\"You play X (first move) and computer plays O.\")\r\n        print(\"Computer plays randomly, not strategically.\")\r\n        self.printBoard()\r\n\r\n    def printBoard(self) -> None:\r\n        \"\"\" prints the board on the screen based on the values in the self.board data field \"\"\"\r\n        print(\r\n            \"\"\"\r\n             {0} | {1} | {2}   0 | 1 | 2\r\n            ---+---+--- ---+---+---\r\n             {3} | {4} | {5}   3 | 4 | 5\r\n            ---+---+--- ---+---+---\r\n             {6} | {7} | {8}   6 | 7 | 8\r\n    \r\n            \"\"\".format(self.board[0], self.board[1], self.board[2], self.board[3], self.board[4], self.board[5],\r\n                       self.board[6], self.board[7], self.board[8])\r\n        )\r\n\r\n    def playerNextMove(self) -> None:\r\n        \"\"\" prompts the player for a valid cell number;\r\n            error checks that the input is a valid cell number;\r\n            and prints the info and the updated self.board;\r\n        \"\"\"\r\n        while True:\r\n            # init user prompt\r\n            userMove = input(\"Enter next player move (0-8): \")\r\n\r\n            # checks for valid user cell input\r\n            if not userMove.isdigit():\r\n                print(\"Input is not an integer\")\r\n            elif not (int(userMove) >= 0 and int(userMove) < 9):\r\n                print(\"Enter a valid cell between 0 and 8\")\r\n            else:\r\n                # place an X in the selected cell if it is empty\r\n                if self.board[int(userMove)] == ' ':\r\n                    self.board[int(userMove)] = 'X'\r\n                    break\r\n                else:\r\n                    print(\"Cell is not empty\")\r\n\r\n        self.printBoard()\r\n\r\n    def computerNextMove(self) -> None:\r\n        \"\"\" computer  checks for possible wins. If it can win it does\r\n         Then the computer checks for possible losses, if it prevent that it will\r\n         A trick is to win through the diagonals, since the computer is scared of diagonals\r\n            The computer prints the info and updated self.board\r\n        \"\"\"\r\n        #Checks for win\r\n        taken = []\r\n        computerMove = -1\r\n\r\n        for i in range(9):\r\n            if self.board[i] == \"O\":\r\n                taken.append(1)\r\n            elif self.board[i] == \"X\":\r\n                taken.append(0)\r\n            else:\r\n                taken.append(-1)\r\n\r\n\r\n        found = False\r\n        for first in range(9):\r\n\r\n            for second in range(first, 9):\r\n                if (found):\r\n                    break\r\n                if  (taken[first] == 1 and taken[second] == 1 and first != second ): # finds two distinct computer moves\r\n                    if (first % 3 == second % 3): # if they are on the same column\r\n                        for i in range(3):\r\n                            if self.board[3 * i + first % 3] == ' ': # find blank space to play\r\n                                computerMove = 3*i + (first % 3) # make the move\r\n                                found = True\r\n                                break\r\n                    if floor(first/3) == floor(second/3):\r\n                        for i in range(3):\r\n                            if (self.board[3*floor(first/3) + i] == \" \"):\r\n                                computerMove = 3*floor(first/3) + i\r\n                                found = True\r\n                                break\r\n\r\n        if computerMove != -1:\r\n            self.board[computerMove] = \"O\"\r\n            self.printBoard()\r\n            return # make it and return\r\n\r\n        found = False\r\n        for first in range(9):\r\n            for second in range(first, 9):\r\n                if (found):\r\n                    break\r\n                if  (taken[first] == 0 and taken[second] == 0 and first != second ): # finding two distinct oppponent moves\r\n                    if (first % 3 == second % 3): # if the the moves are in the same column\r\n                        for i in range(3):\r\n                            if self.board[3 * i + first % 3] == ' ': # find blank space to play\r\n                                computerMove = 3*i + (first % 3) # make the move\r\n                                found = True\r\n                                break\r\n                    if floor(first/3) == floor(second/3):\r\n                        for i in range(3):\r\n                            if (self.board[3*floor(first/3) + i] == \" \"):\r\n                                computerMove = 3*floor(first/3) + i\r\n                                found = True\r\n                                break\r\n\r\n        if computerMove != -1:\r\n            self.board[computerMove] = \"O\"\r\n            self.printBoard()\r\n            return\r\n\r\n        computerMove = random.randint(0, 8)\r\n        while (self.board[computerMove] == \"O\" or self.board[computerMove] == \"X\"):\r\n            computerMove = random.randint(0, 8)\r\n\r\n        self.board[computerMove] = \"O\"\r\n        self.printBoard()\r\n\r\n    def hasWon(self, who: str) -> bool:\r\n        \"\"\" returns True if who (being passed 'X' or 'O') has won, False otherwise \"\"\"\r\n\r\n        for i in range(3):\r\n            # checks for vertical win\r\n            if self.board[0 + i] == who and self.board[3 + i] == who and self.board[6 + i] == who:\r\n                return True;\r\n            # checks for horizontal win\r\n            if self.board[3 * i] == who and self.board[3 * i + 1] == who and self.board[3 * i + 2] == who:\r\n                return True;\r\n            # checks for diagonal win\r\n        if self.board[4] == who:\r\n            if self.board[0] == who and self.board[8] == who:\r\n                return True\r\n            elif self.board[2] == who and self.board[6] == who:\r\n                return True\r\n\r\n        return False\r\n\r\n    def terminate(self, who: str) -> bool:\r\n        \"\"\" returns True if who (being passed 'X' or 'O') has won or if it's a draw, False otherwise;\r\n            it also prints the final messages:\r\n                 \"You won! Thanks for playing.\" or\r\n                 \"You lost! Thanks for playing.\" or\r\n                 \"A draw! Thanks for playing.\"\r\n        \"\"\"\r\n        # Checks for win and writes the corresponding end message.\r\n        if self.hasWon(\"X\"):\r\n            print(\"You won! Thanks for playing\")\r\n            return True;\r\n        #  Checks for loss and writes the corresponding end message.\r\n\r\n        if self.hasWon(\"O\"):\r\n            print(\"You Lost! Thanks for playing\")\r\n            return False\r\n\r\n        # Checks for draw and writes the corresponding end message.\r\n        draw = True;\r\n        for i in range(9):\r\n            if self.board[i] != \"X\" and self.board[i] != \"O\":\r\n                draw = False;\r\n\r\n        if draw:\r\n            print(\"A draw! Thanks for playing.\")\r\n            return True;\r\n\r\n        # Nobody won, so return false.\r\n        return False\r\n\r\n\r\nif __name__ == \"__main__\":  # Use as is\r\n    ttt = TicTacToe()  # initialize a game\r\n    while True:\r\n        ttt.playerNextMove()  # X starts first\r\n        if (ttt.terminate('X')): break  # if X won or a draw, print message and terminate\r\n        ttt.computerNextMove()  # computer plays O\r\n        if (ttt.terminate('O')): break  # if O won or a draw, print message and terminate
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Lab1_part1_improved/main.py b/Lab1_part1_improved/main.py
--- a/Lab1_part1_improved/main.py	
+++ b/Lab1_part1_improved/main.py	
@@ -16,7 +16,7 @@
         self.played = set()  # Set (of cell num) already played: to keep track of the played cells
         print("Welcome to Tic-Tac-Toe!")
         print("You play X (first move) and computer plays O.")
-        print("Computer plays randomly, not strategically.")
+        print("Computer plays strategically, so watch out!")
         self.printBoard()
 
     def printBoard(self) -> None:
@@ -67,6 +67,7 @@
         taken = []
         computerMove = -1
 
+        #Keeps track of what moves have been made in a list
         for i in range(9):
             if self.board[i] == "O":
                 taken.append(1)
@@ -79,7 +80,7 @@
         found = False
         for first in range(9):
 
-            for second in range(first, 9):
+            for second in range(first, 9): # checking for any potential CPU wins
                 if (found):
                     break
                 if  (taken[first] == 1 and taken[second] == 1 and first != second ): # finds two distinct computer moves
@@ -89,14 +90,14 @@
                                 computerMove = 3*i + (first % 3) # make the move
                                 found = True
                                 break
-                    if floor(first/3) == floor(second/3):
+                    if floor(first/3) == floor(second/3): # if the moves are on the same row
                         for i in range(3):
-                            if (self.board[3*floor(first/3) + i] == " "):
-                                computerMove = 3*floor(first/3) + i
+                            if (self.board[3*floor(first/3) + i] == " "): #find the blank space
+                                computerMove = 3*floor(first/3) + i # make the move
                                 found = True
                                 break
 
-        if computerMove != -1:
+        if computerMove != -1: # if the computer has decided the move
             self.board[computerMove] = "O"
             self.printBoard()
             return # make it and return
@@ -113,14 +114,14 @@
                                 computerMove = 3*i + (first % 3) # make the move
                                 found = True
                                 break
-                    if floor(first/3) == floor(second/3):
+                    if floor(first/3) == floor(second/3): # if the moves are on the same row
                         for i in range(3):
                             if (self.board[3*floor(first/3) + i] == " "):
                                 computerMove = 3*floor(first/3) + i
                                 found = True
                                 break
 
-        if computerMove != -1:
+        if computerMove != -1: # if the computer has decided the move
             self.board[computerMove] = "O"
             self.printBoard()
             return
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Lab1_L2A_G16.iml" filepath="$PROJECT_DIR$/.idea/Lab1_L2A_G16.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/Lab1_L2A_G16.iml
===================================================================
diff --git a/.idea/Lab1_L2A_G16.iml b/.idea/Lab1_L2A_G16.iml
new file mode 100644
--- /dev/null	
+++ b/.idea/Lab1_L2A_G16.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/misc.xml
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/misc.xml	
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/inspectionProfiles/profiles_settings.xml	
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
